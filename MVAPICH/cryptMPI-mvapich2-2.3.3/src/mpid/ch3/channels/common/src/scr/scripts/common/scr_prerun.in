#!/bin/bash

# Run this script before the job runs to clear
# the cache in case a previous run left something.

# if SCR is disabled, immediately exit
if [ "$SCR_ENABLE" == "0" ] ; then
  exit 0
fi

# turn on verbosity
if [ -n "$SCR_DEBUG" ]; then
  if [ $SCR_DEBUG -gt 0 ] ; then
    set -x
  fi
fi

# record the start time of the script
start_time=`date`
start_secs=`date +%s`

bindir="@bindir@"

prog="scr_prerun"

print_usage() { echo "Usage: $prog [-p prefix_dir]"; exit 1; }

# process command line options
PARDIR=${SCR_PREFIX:-`pwd`}
OPTIND=1
while getopts "p:" flag ; do
  case $flag in
    p) PARDIR=$OPTARG;;
    *) print_usage;;
  esac
done

pardir=$PARDIR
# check that we have the parallel file system prefix directory
if [ "$PARDIR" == "" ] ; then
  print_usage
fi

# all parameters checked out, start normal output
echo "$prog: Started: $start_time"

ret=0

# check that we have all of the runtime dependencies we need
$bindir/scr_test_runtime
if [ $? -ne 0 ] ; then
  echo "$prog: exit code: 1"
  exit 1
fi

# create the .scr subdirectory in the prefix directory
mkdir -p ${pardir}/.scr

# TODO: It would be nice to clear the cache and control directories
# here in preparation for the run.  However, a simple rm -rf is too
# dangerous, since it's too easy to accidentally specify the wrong
# base directory.
#
# For now, we just keep this script around as a place holder.

# clear any existing flush or nodes files
# NOTE: we *do not* clear the halt file, since the user may have
# requested the job to halt
rm -f ${pardir}/.scr/flush.scr
rm -f ${pardir}/.scr/nodes.scr

# report timing info
end_time=`date`
end_secs=`date +%s`
run_secs=$(($end_secs - $start_secs))
echo "$prog: Ended: $end_time"
echo "$prog: secs: $run_secs"

# report exit code and exit
echo "$prog: exit code: $ret"
exit $ret
